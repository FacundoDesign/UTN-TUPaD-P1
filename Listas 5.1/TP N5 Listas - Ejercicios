# TP 5: LISTAS
# Tecnicatura Universitaria en Programación - UTN

print("=" * 60)
print("TP 5: EJERCICIOS DE LISTAS")
print("=" * 60)

# EJERCICIO 1
print("\n1) Lista con múltiplos de 4 del 1 al 100:")
print("-" * 40)

# Crear lista con múltiplos de 4 del 1 al 100
multiplos_4 = list(range(4, 101, 4))
print(f"Múltiplos de 4: {multiplos_4}")
print(f"Cantidad de múltiplos: {len(multiplos_4)}")

# EXPLICACIÓN: 
# range(4, 101, 4) genera números desde 4 hasta 100 (no incluye 101) con saltos de 4
# list() convierte el objeto range en una lista

# EJERCICIO 2
print("\n2) Lista con cinco elementos - mostrar penúltimo:")
print("-" * 40)

# Crear lista con cinco elementos
mis_favoritos = ["pizza", "chocolate", "música", "programar", "viajar"]
print(f"Lista completa: {mis_favoritos}")
print(f"Penúltimo elemento: {mis_favoritos[-2]}")

# EXPLICACIÓN:
# [-2] accede al penúltimo elemento usando indexación negativa
# Los índices negativos cuentan desde el final: -1 es el último, -2 el penúltimo, etc.

# EJERCICIO 3
print("\n3) Lista vacía - agregar tres palabras:")
print("-" * 40)

# Crear lista vacía y agregar elementos
lista_vacia = []
print(f"Lista inicial (vacía): {lista_vacia}")

lista_vacia.append("python")
lista_vacia.append("programación")
lista_vacia.append("aprendizaje")

print(f"Lista después de agregar palabras: {lista_vacia}")

# EXPLICACIÓN:
# append() agrega un elemento al final de la lista
# Se ejecuta secuencialmente, agregando un elemento por vez

# EJERCICIO 4
print("\n4) Reemplazar segundo y último elemento:")
print("-" * 40)

animales = ["perro", "gato", "conejo", "pez"]
print(f"Lista original: {animales}")

# Reemplazar segundo elemento (índice 1) y último elemento (índice -1)
animales[1] = "loro"
animales[-1] = "oso"

print(f"Lista modificada: {animales}")

# EXPLICACIÓN:
# animales[1] accede al segundo elemento (índice 1, ya que se cuenta desde 0)
# animales[-1] accede al último elemento usando indexación negativa
# La asignación directa reemplaza el valor en esa posición

# EJERCICIO 5
print("\n5) Análisis de programa:")
print("-" * 40)

# Programa a analizar (simulado):
print("Programa analizado:")
print("lista = [1, 2, 3, 4, 5]")
print("print(lista[1:4])")
print("Resultado: [2, 3, 4]")

print("\nEXPLICACIÓN:")
print("El programa utiliza 'slicing' para extraer una sublista.")
print("lista[1:4] toma elementos desde el índice 1 hasta el 3 (no incluye el 4).")
print("Slicing: [inicio:fin] donde 'inicio' se incluye y 'fin' se excluye.")

# EJERCICIO 6
print("\n6) Números del 10 al 30 con saltos de 5 - mostrar dos primeros:")
print("-" * 40)

numeros_saltos = list(range(10, 31, 5))
print(f"Lista completa: {numeros_saltos}")
print(f"Dos primeros elementos: {numeros_saltos[:2]}")

# EXPLICACIÓN:
# range(10, 31, 5): desde 10 hasta 30 (incluido) con saltos de 5
# [:2] toma los primeros dos elementos (índices 0 y 1)

# EJERCICIO 7
print("\n7) Reemplazar valores centrales de la lista autos:")
print("-" * 40)

autos = ["sedan", "polo", "suran", "gol"]
print(f"Lista original: {autos}")

# Reemplazar valores en índices 1 y 2
autos[1] = "civic"
autos[2] = "corolla"

print(f"Lista modificada: {autos}")

# EXPLICACIÓN:
# Los índices 1 y 2 son las posiciones centrales en una lista de 4 elementos
# Se reemplazan directamente asignando nuevos valores

# EJERCICIO 8
print("\n8) Lista 'dobles' - agregar dobles de 5, 10 y 15:")
print("-" * 40)

dobles = []
print(f"Lista inicial: {dobles}")

# Agregar el doble de cada número directamente
dobles.append(5 * 2)   # doble de 5
dobles.append(10 * 2)  # doble de 10
dobles.append(15 * 2)  # doble de 15

print(f"Lista con dobles: {dobles}")

# EXPLICACIÓN:
# Se calcula el doble de cada número (multiplicación por 2) y se agrega directamente
# append() recibe el resultado de la operación matemática

# EJERCICIO 9
print("\n9) Lista anidada 'compras' - múltiples operaciones:")
print("-" * 40)

compras = [["pan", "leche"], ["arroz", "fideos", "salsa"], ["agua"]]
print(f"Lista original: {compras}")

# a) Agregar "jugo" a la lista del tercer cliente
compras[2].append("jugo")
print(f"Después de agregar 'jugo' al tercer cliente: {compras}")

# b) Reemplazar "fideos" por "tallarines" en la lista del segundo cliente
compras[1][1] = "tallarines"
print(f"Después de reemplazar 'fideos' por 'tallarines': {compras}")

# c) Eliminar "pan" de la lista del primer cliente
compras[0].remove("pan")
print(f"Después de eliminar 'pan' del primer cliente: {compras}")

print(f"Lista final: {compras}")

# EXPLICACIÓN:
# compras[2] accede a la lista del tercer cliente (índice 2)
# compras[1][1] accede al segundo elemento de la lista del segundo cliente
# remove() elimina la primera ocurrencia del elemento especificado

# EJERCICIO 10
print("\n10) Lista anidada con estructura específica:")
print("-" * 40)

# Crear la lista anidada según las especificaciones
lista_anidada = []

# Posición 0: 15
lista_anidada.append(15)

# Posición 1: True
lista_anidada.append(True)

# Posición 2: Una sublista con tres números decimales
lista_anidada.append([25.5, 57.9, 30.6])

# Posición 3: False
lista_anidada.append(False)

print(f"Lista anidada completa: {lista_anidada}")

# Verificar acceso a elementos específicos:
print(f"lista_anidada[0]: {lista_anidada[0]}")
print(f"lista_anidada[1]: {lista_anidada[1]}")
print(f"lista_anidada[2][0]: {lista_anidada[2][0]}")
print(f"lista_anidada[2][1]: {lista_anidada[2][1]}")
print(f"lista_anidada[2][2]: {lista_anidada[2][2]}")
print(f"lista_anidada[3]: {lista_anidada[3]}")

# EXPLICACIÓN:
# Se crea una lista con diferentes tipos de datos: entero, booleano, lista anidada, booleano
# Para acceder a elementos de listas anidadas se usan múltiples índices: [índice_principal][índice_sublista]

print("\n" + "=" * 60)
print("CONCEPTOS CLAVE APRENDIDOS:")
print("=" * 60)
print("• Indexación: Usar números para acceder a elementos específicos")
print("• Indexación negativa: Contar desde el final con números negativos")
print("• Slicing: Extraer sublistas con [inicio:fin]")
print("• append(): Agregar elementos al final de una lista")
print("• remove(): Eliminar elementos por valor")
print("• Listas anidadas: Listas dentro de listas")
print("• range(): Generar secuencias numéricas")
print("• Modificación directa: Asignar nuevos valores por índice")
