# EJERCICIO 7: Funci√≥n que realiza operaciones b√°sicas y devuelve tupla


def operaciones_basicas(a, b):
    """
    Funci√≥n que recibe dos n√∫meros y devuelve una tupla con las cuatro operaciones b√°sicas.
    
    Par√°metros:
        a (float): Primer n√∫mero
        b (float): Segundo n√∫mero
    
    Retorna:
        tuple: Tupla con (suma, resta, multiplicaci√≥n, divisi√≥n)
               Si b=0, la divisi√≥n ser√° un mensaje de error
    """
    # Calculamos cada operaci√≥n por separado
    
    # 1. SUMA: a + b
    suma = a + b
    
    # 2. RESTA: a - b
    resta = a - b
    
    # 3. MULTIPLICACI√ìN: a √ó b
    multiplicacion = a * b
    
    # 4. DIVISI√ìN: a √∑ b (con validaci√≥n para evitar divisi√≥n por cero)
    if b != 0:
        # Si b no es cero, realizamos la divisi√≥n normal
        division = a / b
    else:
        # Si b es cero, no podemos dividir, devolvemos un mensaje
        division = "Error: Divisi√≥n por cero"
    
    # Creamos y devolvemos una tupla con los cuatro resultados
    # Una tupla se crea con par√©ntesis y elementos separados por comas
    resultados = (suma, resta, multiplicacion, division)
    
    return resultados

# ====================================================================
# PROGRAMA PRINCIPAL
# ====================================================================

def main():
    """Funci√≥n principal que ejecuta el programa."""
    
    # Mostramos el t√≠tulo del ejercicio
    print("="*55)
    print("EJERCICIO 7: Operaciones B√°sicas (Devuelve Tupla)")
    print("="*55)
    
    # Explicamos qu√© hace el programa
    print(" Este programa realiza las cuatro operaciones b√°sicas:")
    print("   ‚Ä¢ Suma (+)")
    print("   ‚Ä¢ Resta (-)")
    print("   ‚Ä¢ Multiplicaci√≥n (√ó)")
    print("   ‚Ä¢ Divisi√≥n (√∑)")
    print(" Todas las operaciones se devuelven en una tupla.\n")
    
    # Solicitamos los dos n√∫meros al usuario
    print("Ingresa dos n√∫meros para realizar las operaciones:")
    
    try:
        # Pedimos el primer n√∫mero
        print("Primer n√∫mero (a):")
        numero_a = float(input("‚Üí "))
        
        # Pedimos el segundo n√∫mero
        print("Segundo n√∫mero (b):")
        numero_b = float(input("‚Üí "))
        
        # Mostramos los n√∫meros ingresados
        print(f"\n N√öMEROS INGRESADOS:")
        print(f"   a = {numero_a}")
        print(f"   b = {numero_b}")
        
        # Llamamos a la funci√≥n y recibimos la tupla de resultados
        # La funci√≥n devuelve UNA tupla, pero podemos "desempaquetarla"
        resultados_tupla = operaciones_basicas(numero_a, numero_b)
        
        # Mostramos la tupla completa
        print(f"\n TUPLA DEVUELTA POR LA FUNCI√ìN:")
        print(f"   {resultados_tupla}")
        
        # Desempaquetamos la tupla en variables individuales
        # Esto significa asignar cada elemento de la tupla a una variable
        suma, resta, multiplicacion, division = resultados_tupla
        
        # Mostramos cada resultado de forma clara
        print(f"\n RESULTADOS INDIVIDUALES:")
        print("-" * 35)
        print(f"Suma:           {numero_a} + {numero_b} = {suma}")
        print(f"Resta:          {numero_a} - {numero_b} = {resta}")
        print(f"Multiplicaci√≥n: {numero_a} √ó {numero_b} = {multiplicacion}")
        
        # Para la divisi√≥n, verificamos si hay error
        if isinstance(division, str):
            # Si division es un string, es el mensaje de error
            print(f"Divisi√≥n:       {numero_a} √∑ {numero_b} = {division}")
        else:
            # Si division es un n√∫mero, mostramos el resultado
            print(f"Divisi√≥n:       {numero_a} √∑ {numero_b} = {division:.4f}")
        
        # Mostramos diferentes formas de acceder a los elementos de la tupla
        print(f"\nüîç ACCESO A ELEMENTOS DE LA TUPLA:")
        print(f"   resultados_tupla[0] (suma) = {resultados_tupla[0]}")
        print(f"   resultados_tupla[1] (resta) = {resultados_tupla[1]}")
        print(f"   resultados_tupla[2] (multiplicaci√≥n) = {resultados_tupla[2]}")
        print(f"   resultados_tupla[3] (divisi√≥n) = {resultados_tupla[3]}")
        
    except ValueError:
        # Si el usuario no ingresa n√∫meros v√°lidos
        print(" Error: Debes ingresar n√∫meros v√°lidos.")
        print("Te mostraremos un ejemplo con n√∫meros 15 y 3:\n")
        
        # Ejecutamos la funci√≥n con n√∫meros de ejemplo
        ejemplo_resultados = operaciones_basicas(15, 3)
        suma, resta, mult, div = ejemplo_resultados
        
        print(f" Tupla devuelta: {ejemplo_resultados}")
        print(f" Suma: 15 + 3 = {suma}")
        print(f" Resta: 15 - 3 = {resta}")
        print(f" Multiplicaci√≥n: 15 √ó 3 = {mult}")
        print(f" Divisi√≥n: 15 √∑ 3 = {div}")
    
    # Ejemplos adicionales
    print("\n" + "="*45)
    print("EJEMPLOS ADICIONALES:")
    print("="*45)
    
    # Lista de pares de n√∫meros para ejemplos
    ejemplos = [
        (10, 2),
        (7, 0),    # Este mostrar√° el error de divisi√≥n por cero
        (25, 4),
        (-8, 3)
    ]
    
    # Procesamos cada ejemplo
    for a, b in ejemplos:
        resultado = operaciones_basicas(a, b)
        suma, resta, mult, div = resultado
        
        print(f"\n Ejemplo: operaciones_basicas({a}, {b})")
        print(f"   Tupla devuelta: {resultado}")
        print(f"   Suma: {suma}, Resta: {resta}, Multiplicaci√≥n: {mult}, Divisi√≥n: {div}")

# Funci√≥n adicional para demostrar otros usos de tuplas
def comparar_operaciones(num1, num2, num3, num4):
    """
    Funci√≥n que compara operaciones entre dos pares de n√∫meros.
    
    Par√°metros:
        num1, num2: Primer par de n√∫meros
        num3, num4: Segundo par de n√∫meros
    """
    print(f"\n COMPARACI√ìN DE OPERACIONES:")
    print(f"   Primer par: {num1} y {num2}")
    print(f"   Segundo par: {num3} y {num4}")
    print("-" * 40)
    
    # Obtenemos las operaciones de ambos pares
    operaciones1 = operaciones_basicas(num1, num2)
    operaciones2 = operaciones_basicas(num3, num4)
    
    # Nombres de las operaciones
    nombres = ["Suma", "Resta", "Multiplicaci√≥n", "Divisi√≥n"]
    
    # Comparamos cada operaci√≥n
    for i in range(4):
        print(f"{nombres[i]:13}: {operaciones1[i]:8} vs {operaciones2[i]:8}")

# Ejecutamos el programa principal
if __name__ == "__main__":
    main()
    
    # Ejemplo de funci√≥n de comparaci√≥n
    print("\n" + "="*50)
    print("FUNCI√ìN EXTRA: COMPARACI√ìN DE OPERACIONES")
    print("="*50)
    comparar_operaciones(12, 4, 20, 5)


# Detalle del Codigo:
# La funci√≥n recibe DOS par√°metros: a y b
# Calcula las cuatro operaciones b√°sicas por separado
# Valida la divisi√≥n por cero antes de dividir
# DEVUELVE una tupla con los cuatro resultados: (suma, resta, mult, div)
# Una tupla es una estructura de datos INMUTABLE (no se puede cambiar)
# Se crea con par√©ntesis: (elemento1, elemento2, elemento3, elemento4)
# En el programa principal "desempaquetamos" la tupla en variables
# Podemos acceder a elementos individuales con √≠ndices: tupla[0], tupla[1], etc.
# La tupla permite devolver m√∫ltiples valores desde una funci√≥n
# isinstance() verifica si una variable es de un tipo espec√≠fico
